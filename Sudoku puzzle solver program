#include <stdio.h>

#define SIZE 9

// Function prototypes
int solveSudoku(int grid[SIZE][SIZE]);
int isSafe(int grid[SIZE][SIZE], int row, int col, int num);
void printGrid(int grid[SIZE][SIZE]);

int main() {
    // Example of an unsolved Sudoku puzzle (0 represents empty cells)
    int grid[SIZE][SIZE] = {
        {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };

    if (solveSudoku(grid)) {
        printf("Sudoku puzzle solved successfully:\n");
        printGrid(grid);
    } else {
        printf("No solution exists for the given Sudoku puzzle.\n");
    }

    return 0;
}

// Function to solve the Sudoku puzzle using backtracking
int solveSudoku(int grid[SIZE][SIZE]) {
    int row, col;
    int isEmpty = 0;

    // Find an empty cell in the grid
    for (row = 0; row < SIZE; row++) {
        for (col = 0; col < SIZE; col++) {
            if (grid[row][col] == 0) {
                isEmpty = 1;
                break;
            }
        }
        if (isEmpty) {
            break;
        }
    }

    // If there are no empty cells, the puzzle is solved
    if (!isEmpty) {
        return 1;
    }

    // Try digits from 1 to 9 in the empty cell
    for (int num = 1; num <= 9; num++) {
        if (isSafe(grid, row, col, num)) {
            grid[row][col] = num;

            // Recursively attempt to solve the rest of the puzzle
            if (solveSudoku(grid)) {
                return 1;
            }

            // Undo the current cell for backtracking
            grid[row][col] = 0;
        }
    }

    return 0; // Trigger backtracking
}

// Function to check if placing a number is valid
int isSafe(int grid[SIZE][SIZE], int row, int col, int num) {
    // Check if the number is present in the current row
    for (int x = 0; x < SIZE; x++) {
        if (grid[row][x] == num) {
            return 0;
        }
    }

    // Check if the number is present in the current column
    for (int x = 0; x < SIZE; x++) {
        if (grid[x][col] == num) {
            return 0;
        }
    }

    // Check if the number is present in the 3x3 sub-grid
    int startRow = row - row % 3;
    int startCol = col - col % 3;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (grid[i + startRow][j + startCol] == num) {
                return 0;
            }
        }
    }

    return 1; // The number can be placed safely
}

// Function to print the Sudoku grid
void printGrid(int grid[SIZE][SIZE]) {
    for (int row = 0; row < SIZE; row++) {
        for (int col = 0; col < SIZE; col++) {
            printf("%2d ", grid[row][col]);
        }
        printf("\n");
    }
}


Output:
Sudoku puzzle solved successfully:
 5  3  4  6  7  8  9  1  2 
 6  7  2  1  9  5  3  4  8 
 1  9  8  3  4  2  5  6  7 
 8  5  9  7  6  1  4  2  3 
 4  2  6  8  5  3  7  9  1 
 7  1  3  9  2  4  8  5  6 
 9  6  1  5  3  7  2  8  4 
 2  8  7  4  1  9  6  3  5 
 3  4  5  2  8  6  1  7  9 
